## Progress

### Rating: 7/10

**Explanation**:  
This week, we've made considerable progress in developing the core functionality of our project, particularly with the implementation of the SDL setup and the initial maze rendering. The project is moving forward, but there have been challenges with the SDL rendering in a Docker environment, which required more time and troubleshooting. As a result, some planned features are still incomplete.

### Completed Parts:
- The basic structure and initialization of SDL.
- Initial maze structure and map rendering logic.
- Integration of the maze data into the rendering loop.

### Incomplete Parts:
- Proper configuration of SDL in Docker, especially getting the rendering to work.
- Optimizing the rendering logic to account for screen size and FOV adjustments.
- Fine-tuning the raycasting algorithm to accurately represent walls and distances.

---

## Challenges

### Technical Challenge (200+ words):

The most difficult technical challenge encountered this week was getting SDL to work properly within a Docker environment. Initially, we encountered errors with the X11 display server, which is typically used for rendering graphics in Linux environments. These errors prevented the application from initializing the SDL window and renderer properly, leading to the failure of our application.

To troubleshoot, we attempted to use alternative video drivers like `dummy`, but this only resulted in further errors, specifically that SDL could not find a matching render driver. This issue highlighted the complexities of running graphical applications inside containers, which do not have direct access to the host's display hardware by default.

After extensive research, it became clear that our current Docker setup might not be fully compatible with the requirements of SDL's rendering pipeline, especially for 3D rendering. To work around this issue, we are considering alternatives, such as setting up a virtual framebuffer or running the application directly on the host machine during development, which would avoid the constraints of Docker's environment.

This challenge has also underscored the need to better understand the interaction between SDL, the host environment, and Docker's limitations, which is crucial for future projects that involve graphical rendering within containers.

### Non-Technical Challenge (200+ words):

One of the most significant non-technical challenges this week was time management and team communication. With multiple tasks at hand and the need for frequent troubleshooting, it became difficult to maintain a steady pace of progress. Coordination between team members also proved challenging, especially when dealing with unexpected technical roadblocks that required more time to solve than initially anticipated.

Another non-technical challenge was dealing with the frustration of repeated failures, particularly when solutions that seemed promising did not work as expected. This affected team morale and made it harder to stay focused on finding solutions. To address this, we had to reassess our approach to problem-solving, ensuring that we remained patient and methodical, even in the face of setbacks.

We also realized the importance of clear and regular communication, especially when dealing with complex technical issues that require input from multiple team members. By establishing more frequent check-ins and using collaborative tools like shared documents and messaging apps, we were able to improve our coordination and ensure that everyone was on the same page.

---

## Screenshots

1. **Maze Structure Rendering**: A screenshot showing the initial maze layout rendered by SDL.
2. **Error Log**: A screenshot of the terminal showing the SDL initialization error in Docker, illustrating the technical challenges faced.

